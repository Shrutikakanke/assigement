import java.util.*;

public class MaxSumPath {

    public static int findMaxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;

        // Create DP table
        int[][] dp = new int[m + 1][n + 1];

        // Initialize first row and column to 0 (no path)
        for (int i = 0; i <= m; i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = 0;
        }

        // Fill DP table iteratively
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                // Consider both possibilities (ending at X or Y)
                int sumEndingAtX = dp[i - 1][j] + X[i - 1];
                int sumEndingAtY = dp[i][j - 1] + Y[j - 1];

                // Choose the larger sum, considering switching if elements are equal
                dp[i][j] = Math.max(sumEndingAtX, (X[i - 1] == Y[j - 1]) ? 
                        Math.max(dp[i - 1][j], dp[i][j - 1]) + Y[j - 1] : sumEndingAtY);
            }
        }

        // Maximum sum path is at the last cell
        return dp[m][n];
    }

    public static void main(String[] args) {
        int[] X = {3, 6, 7, 8, 10, 12, 15, 18, 100};
        int[] Y = {1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50};

        int maxSumPath = findMaxSumPath(X, Y);
        System.out.println("Maximum sum path: " + maxSumPath);
    }
}
